
import { jsPDF } from "jspdf";
import type { ClassifyImageOutput, QuestionnaireData } from "@/ai/flows/classify-image";
import { format } from 'date-fns';

/**
 * Generates a PDF report from skin analysis results.
 *
 * @param result - The AI analysis output.
 * @param questionnaireData - The user's questionnaire answers.
 * @param imageUri - The data URI of the analyzed image.
 * @returns A jsPDF document instance.
 */
export const generatePdfReport = (
    result: ClassifyImageOutput,
    questionnaireData: QuestionnaireData | null,
    imageUri: string
): jsPDF => {
    const doc = new jsPDF();
    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;
    let currentY = 20; // Starting Y position

    // --- Header ---
    doc.setFontSize(18);
    doc.text("Skin Analysis Report", pageWidth / 2, currentY, { align: 'center' });
    currentY += 8;
    doc.setFontSize(10);
    doc.text(`Generated on: ${format(new Date(), 'PPP p')}`, pageWidth / 2, currentY, { align: 'center' });
    currentY += 15;

    // --- Patient Information ---
    doc.setFontSize(14);
    doc.text("Patient Information", 15, currentY);
    currentY += 8;
    doc.setFontSize(11);
    doc.line(15, currentY - 4, pageWidth - 15, currentY - 4); // Separator line

    const patientInfo = [
        `Age: ${questionnaireData?.age ?? 'Not Provided'}`,
        `Gender: ${questionnaireData?.gender ?? 'Not Provided'}`,
        `Complexion: ${questionnaireData?.complexion ?? 'Not Provided'}`,
        `Symptoms: ${questionnaireData?.symptoms ?? 'Not Provided'}`,
        `Products Used: ${questionnaireData?.products || 'Not Provided'}`,
    ];

    patientInfo.forEach(info => {
        if (currentY > pageHeight - 20) { // Check for page break
             doc.addPage();
             currentY = 20;
        }
        doc.text(info, 20, currentY);
        currentY += 7;
    });
    currentY += 10; // Extra space

    // --- Analysis Results ---
    doc.setFontSize(14);
    doc.text("Analysis Results", 15, currentY);
    currentY += 8;
    doc.setFontSize(11);
    doc.line(15, currentY - 4, pageWidth - 15, currentY - 4); // Separator line

    const analysisDetails = [
        `Predicted Condition: ${result.predictedDisease}`,
        `Confidence Score: ${result.confidencePercentage.toFixed(1)}%`,
        `AI Notes: ${result.notes || 'None'}`,
    ];

     analysisDetails.forEach(info => {
        if (currentY > pageHeight - 20) { // Check for page break
             doc.addPage();
             currentY = 20;
        }
        // Handle potential line breaks for long notes
        const splitNotes = doc.splitTextToSize(info, pageWidth - 40);
        doc.text(splitNotes, 20, currentY);
        currentY += (splitNotes.length * 5) + 2; // Adjust Y based on number of lines
    });
     currentY += 5;


    // --- Disclaimer ---
     if (currentY > pageHeight - 40) { // Check space for disclaimer and image
        doc.addPage();
        currentY = 20;
     }
    doc.setFontSize(10);
    doc.setTextColor(150); // Grey color
    const disclaimer = "Disclaimer: This report is generated by an AI assistant for informational purposes only and does not constitute a medical diagnosis. Always consult a qualified healthcare professional for accurate diagnosis and treatment.";
    const splitDisclaimer = doc.splitTextToSize(disclaimer, pageWidth - 30);
    doc.text(splitDisclaimer, 15, currentY);
    currentY += (splitDisclaimer.length * 5) + 10;

     // --- Uploaded Image ---
     if (currentY > pageHeight - 70) { // Check space for image
        doc.addPage();
        currentY = 20;
     }
    doc.setFontSize(14);
    doc.setTextColor(0); // Reset text color
    doc.text("Uploaded Image", 15, currentY);
    currentY += 8;
    doc.line(15, currentY - 4, pageWidth - 15, currentY - 4);

    try {
        // Add the image - adjust width/height as needed
        // Max width/height to fit page, maintain aspect ratio
        const imgProps = doc.getImageProperties(imageUri);
        const imgWidth = 60; // Fixed width for the image
        const imgHeight = (imgProps.height * imgWidth) / imgProps.width;
        const imgX = (pageWidth - imgWidth) / 2; // Center image

        if (currentY + imgHeight > pageHeight - 15) { // Check if image fits
            doc.addPage();
            currentY = 20;
        }
        doc.addImage(imageUri, 'JPEG', imgX, currentY, imgWidth, imgHeight);
        currentY += imgHeight + 10;
    } catch (error) {
        console.error("Error adding image to PDF:", error);
        if (currentY > pageHeight - 20) {
            doc.addPage();
            currentY = 20;
        }
        doc.setTextColor(255, 0, 0); // Red color for error
        doc.text("Error loading image.", 15, currentY);
        currentY += 10;
    }

    // --- Footer (Page Number) ---
    // Optional: Add page numbers if needed, especially for multi-page reports

    return doc;
};

// Utility function to view the PDF in a new tab
export const viewPdf = (doc: jsPDF) => {
  const pdfDataUri = doc.output('datauristring');
  const pdfWindow = window.open("");
  if (pdfWindow) {
      pdfWindow.document.write(`<iframe width='100%' height='100%' src='${pdfDataUri}'></iframe>`);
  } else {
      alert("Could not open PDF viewer. Please ensure popups are allowed.");
  }
};

// Utility function to download the PDF
export const downloadPdf = (doc: jsPDF, filename: string = "skin_analysis_report.pdf") => {
  doc.save(filename);
};
