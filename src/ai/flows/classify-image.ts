// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for classifying face images to predict potential skin diseases.
 *
 * The flow takes an image as input, uses an image classification service to predict the disease,
 * and returns the predicted disease name along with a confidence percentage.
 *
 * @exports classifyImage - The main function to classify the image and return the disease prediction.
 * @exports ClassifyImageInput - The input type for the classifyImage function.
 * @exports ClassifyImageOutput - The output type for the classifyImage function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import {classifyImage as classifyImageService, ImageClassificationResult} from '@/services/image-classifier';

const ClassifyImageInputSchema = z.object({
  imageUri: z
    .string()
    .describe(
      "A face image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ClassifyImageInput = z.infer<typeof ClassifyImageInputSchema>;

const ClassifyImageOutputSchema = z.object({
  predictedDisease: z.string().describe('The predicted disease name.'),
  confidencePercentage: z.number().describe('The confidence percentage of the prediction.'),
});
export type ClassifyImageOutput = z.infer<typeof ClassifyImageOutputSchema>;

export async function classifyImage(input: ClassifyImageInput): Promise<ClassifyImageOutput> {
  return classifyImageFlow(input);
}

const classifyImageFlow = ai.defineFlow<
  typeof ClassifyImageInputSchema,
  typeof ClassifyImageOutputSchema
>({
  name: 'classifyImageFlow',
  inputSchema: ClassifyImageInputSchema,
  outputSchema: ClassifyImageOutputSchema,
}, async input => {
  const imageData = input.imageUri.split(',')[1];
  if (!imageData) {
    throw new Error('Invalid image data URI.');
  }
  const imageBuffer = Buffer.from(imageData, 'base64');
  const classificationResult: ImageClassificationResult = await classifyImageService(imageBuffer);

  return {
    predictedDisease: classificationResult.predictedDisease,
    confidencePercentage: classificationResult.confidencePercentage,
  };
});
